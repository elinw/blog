---
title: The Rt of good package READMEs
date: '2019-11-21'
slug: readmes
tags:
  - readme
---

A recent topic of the Write The Docs' great newsletter was [READMEs](https://www.writethedocs.org/blog/newsletter-july-2019/#readmes-on-readmes-and-other-readme-related-resources). It read _"As theyâ€™re often the first thing people see about a code project, READMEs are pretty important to get right."_. In this post, we'll share some insights around the READMEs of R packages: why they're crucial; what they usually contain; how you can best write yours. Let's dive in!  :swimmer:

## Why is a good README key

As mentioned above, the WTD newsletter stated that READMEs are often the first entry point to a project. For a package you could think of other entry points such as the CRAN homepage, but the README remains quite important as seen in the poll below

```{r jonathan-carroll, echo = FALSE}
blogdown::shortcode("tweet", "969442252610191361")
```

A good README is crucial to recruit users that'll actually gain something from using your package. As written by [noffle](https://github.com/noffle/) in [the Art of README](https://github.com/noffle/art-of-readme), 

> your job, when you're doing it with optimal altruism in mind, isn't to "sell" people on your work. It's to let them evaluate what your creation does as objectively as possible, and decide whether it meets their needs or not -- not to, say, maximize your downloads or userbase. 

Furthermore, you can recycle the content of your README in other venues (more on how to do that -- without repeating yourself -- later) like that vignette mentioned in the poll. If you summarize your package in a good one-liner, 

```
> Connect to R-hub, from R
```

you can re-use it 

* as Package Title in DESCRIPTION, 

```
Title: Connect to 'R-hub'
```

* in the GitHub repo description, 

* in your introduction at a social event (ok, maybe not).

Other parts of a pitch are good talk fodder, blog post introductioTherefore, the time you spend pitching your package in the best possible way is a gift that'll keep on giving, to your users and you.  

## What is a good README

In the Art of README, noffle [includes a checklist](https://github.com/noffle/art-of-readme#bonus-the-readme-checklist); and rOpenSci dev guide [features guidance about the README](https://devguide.ropensci.org/building.html#readme). Now, what about good READMEs in the wild? In this section, we'll have a look at a small sample of READMEs. 

### Sampling READMEs

We shall start by merging the lists of top downloaded and trending CRAN packages one can obtain using [`pkgsearch`](https://github.com/r-hub/pkgsearch/).

```{r sample-readmes}
library("magrittr")
trending <- pkgsearch::cran_trending()
top <- pkgsearch::cran_top_downloaded()
pkglist <- unique(c(trending[["package"]], top[["package"]]))
```

This is a list of `r length(pkglist)` package names, including `r glue::glue_collapse(head(pkglist), sep = ", ", last = " and ")`. Then, again with `pkgsearch`, we'll extract their metadata, before keeping only those that have a GitHub README. More arbitrary choices. :grimacing:

```{r metapkgs}
meta <- pkgsearch::cran_packages(pkglist)
meta <- meta %>%
  dplyr::mutate(URL = strsplit(URL, "\\,")) %>%
  tidyr::unnest(URL) %>%
  dplyr::filter(stringr::str_detect(URL, "github\\.com")) %>%
  dplyr::mutate(URL = stringr::str_remove_all(URL, "\\(.*")) %>%
  dplyr::mutate(URL = stringr::str_remove_all(URL, "\\#.*")) %>%
  dplyr::mutate(URL = trimws(URL)) %>%
  dplyr::select(Package, Title, Date, Version,
                URL) %>%
  dplyr::mutate(path = urltools::path(URL)) %>%
  dplyr::mutate(path = stringr::str_remove(path, "\\/$")) %>%
  tidyr::separate(path, sep = "\\/", into = c("owner", "repo"))
str(meta)
```

At this point we have `r nrow(meta)` packages with `r length(unique(meta$URL))` unique GitHub repo URLs, pfiew.

We'll then extract their preferred README from GitHub API. Some of them won't even have one so we'll lose them from the sample. A first metric we'll extract is the number of lines of the README. 

```{r}
# memoising because we'll run the same query twice
gh <- memoise::memoise(ratelimitr::limit_rate(gh::gh,
                                              ratelimitr::rate(1, 1)))

get_readme_lines <- function(owner, repo){
  readme <- try(gh("GET /repos/:owner/:repo/readme",
                   owner = owner, repo = repo),
                silent = TRUE)
  if(inherits(readme, "try-error")){
    return(NULL)
  }
  readme$download_url %>%
    readLines() %>%
    purrr::discard(. == "") %>%
    length() -> nolines
  
  tibble::tibble(owner = owner,
                 repo = repo,
                 lines_no = nolines)
}

readmes_lengths <- purrr::map2_df(.x = meta$owner, .y = meta$repo,
                       .f = get_readme_lines)
```

The `readmes_lengths` data.frame has `r nrow(readmes_lengths)` lines so we lost a few more packages. How long are usual READMEs?

```{r nolines}
median(readmes_lengths$lines_no)
max(readmes_lengths$lines_no)
min(readmes_lengths$lines_no)
```

###

## How to write a good README

## Conclusion

In this post we discussed the importance of a good package README and gave some data-driven clues as to what is a good README. We also mentioned useful tools and tricks to write a good README. For further READing we recommend the [Write the Docs' list of README-related resources](https://www.writethedocs.org/blog/newsletter-july-2019/#readmes-on-readmes-and-other-readme-related-resources). We also welcome your input below... What do _you_ like seeing in a README?
